/*
 * Data Grid Search API
 * This is and extensible, pluggable search API for iRODS focused on pluggable Elastic Search indexes.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: mike.conway@nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.irods.jargon.extensions.searchplugin.model;

import java.io.IOException;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * IndexSearchAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-06T15:09:01.384Z[GMT]")
public class IndexSearchAttributes {
	@SerializedName("attrib_name")
	private String attribName = null;

	/**
	 * cue for the type of search attribute in the underlying schema
	 */
	@JsonAdapter(AttribTypeEnum.Adapter.class)
	public enum AttribTypeEnum {
		DATE("date"), STRING("string"), INT("int"), FLOAT("float"), BOOLEAN("boolean");

		private String value;

		AttribTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static AttribTypeEnum fromValue(String text) {
			for (AttribTypeEnum b : AttribTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<AttribTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final AttribTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public AttribTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return AttribTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("attrib_type")
	private AttribTypeEnum attribType = null;

	@SerializedName("info")
	private String info = null;
	
	@SerializedName("attrib_example")
	private String attribExample = null;

	

	@SerializedName("shortcut_text")
	private String shortcutText = null;

	public IndexSearchAttributes attribName(String attribName) {
		this.attribName = attribName;
		return this;
	}

	/**
	 * attribute name as defined in the base search schema
	 * 
	 * @return attribName
	 **/
	@Schema(description = "attribute name as defined in the base search schema")
	public String getAttribName() {
		return attribName;
	}

	public void setAttribName(String attribName) {
		this.attribName = attribName;
	}

	public IndexSearchAttributes attribType(AttribTypeEnum attribType) {
		this.attribType = attribType;
		return this;
	}

	/**
	 * cue for the type of search attribute in the underlying schema
	 * 
	 * @return attribType
	 **/
	@Schema(description = "cue for the type of search attribute in the underlying schema")
	public AttribTypeEnum getAttribType() {
		return attribType;
	}

	public void setAttribType(AttribTypeEnum attribType) {
		this.attribType = attribType;
	}

	public IndexSearchAttributes info(String info) {
		this.info = info;
		return this;
	}

	/**
	 * Documentation about the use of the given search type
	 * 
	 * @return info
	 **/
	@Schema(description = "Documentation about the use of the given search type")
	public String getInfo() {
		return info;
	}

	public void setInfo(String info) {
		this.info = info;
	}

	public IndexSearchAttributes shortcutText(String shortcutText) {
		this.shortcutText = shortcutText;
		return this;
	}

	/**
	 * Text shortcut suitable for use in free text advanced search operations, such
	 * that Author:XXXX would cause a specific search on the author information in
	 * the target index, if not specified it defaults to the attrib_name
	 * 
	 * @return shortcutText
	 **/
	@Schema(description = "Text shortcut suitable for use in free text advanced search operations, such that Author:XXXX would cause a specific search on the author information in the target index, if not specified it defaults to the attrib_name")
	public String getShortcutText() {
		return shortcutText;
	}

	public void setShortcutText(String shortcutText) {
		this.shortcutText = shortcutText;
	}
	
	public String getAttribExample() {
		return attribExample;
	}

	public void setAttribExample(String attribExample) {
		this.attribExample = attribExample;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		IndexSearchAttributes indexSearchAttributes = (IndexSearchAttributes) o;
		return Objects.equals(this.attribName, indexSearchAttributes.attribName)
				&& Objects.equals(this.attribType, indexSearchAttributes.attribType)
				&& Objects.equals(this.info, indexSearchAttributes.info)
				&& Objects.equals(this.attribExample, indexSearchAttributes.attribExample)
				&& Objects.equals(this.shortcutText, indexSearchAttributes.shortcutText);
	}

	@Override
	public int hashCode() {
		return Objects.hash(attribName, attribType, info, attribExample, shortcutText);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class IndexSearchAttributes {\n");

		sb.append("    attribName: ").append(toIndentedString(attribName)).append("\n");
		sb.append("    attribType: ").append(toIndentedString(attribType)).append("\n");
		sb.append("    info: ").append(toIndentedString(info)).append("\n");
		sb.append("    attribExample: ").append(toIndentedString(attribExample)).append("\n");
		sb.append("    shortcutText: ").append(toIndentedString(shortcutText)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
