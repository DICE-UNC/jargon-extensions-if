/*
 * iRODS - Simple Publishing API
 * A pluggable service that can take a cart of iRODS files and apply a custom action to them, something akin to a publishing API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mike.conway@nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.irods.jargon.extensions.publishingplugin.model;

import java.io.IOException;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * behavior of a publish plugin after invocation (does it send a redirect? does
 * it return an iRODS path? Does it return data for download?)
 */
@Schema(description = "behavior of a publish plugin after invocation (does it send a redirect? does it return an iRODS path? Does it return data for download?)")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-08T14:49:24.146Z[GMT]")
public class PublishResponseTypes {
	/**
	 * Gets or Sets responseType
	 */
	@JsonAdapter(ResponseTypeEnum.Adapter.class)
	public enum ResponseTypeEnum {
		DOWNLOAD("download"), REDIRECT_URL("redirect_url"), ABSOLUTE_PATH("absolute_path"), SIMPLE("simple");

		private String value;

		ResponseTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static ResponseTypeEnum fromValue(String text) {
			for (ResponseTypeEnum b : ResponseTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<ResponseTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ResponseTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ResponseTypeEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return ResponseTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("response_type")
	private ResponseTypeEnum responseType = null;

	public PublishResponseTypes responseType(ResponseTypeEnum responseType) {
		this.responseType = responseType;
		return this;
	}

	/**
	 * Get responseType
	 * 
	 * @return responseType
	 **/
	@Schema(description = "")
	public ResponseTypeEnum getResponseType() {
		return responseType;
	}

	public void setResponseType(ResponseTypeEnum responseType) {
		this.responseType = responseType;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		PublishResponseTypes publishResponseTypes = (PublishResponseTypes) o;
		return Objects.equals(this.responseType, publishResponseTypes.responseType);
	}

	@Override
	public int hashCode() {
		return Objects.hash(responseType);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class PublishResponseTypes {\n");

		sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
